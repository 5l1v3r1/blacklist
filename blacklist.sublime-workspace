{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"P",
				"Printf	n int, err error ƒ"
			],
			[
				"W",
				"WalkFunc	func(path string, info os.FileInfo, err error) error ʈ"
			],
			[
				"func",
				"func	func {...} ʂ"
			],
			[
				"vc",
				"vcfg	VyOS ν"
			],
			[
				"v",
				"vparent	map[string]bool ʈ"
			],
			[
				"Prin",
				"Println	n int, err error ƒ"
			],
			[
				"M",
				"Match                          func(pattern string, name string) (match ƒ"
			],
			[
				"Sp",
				"Sprintf	string ƒ"
			],
			[
				"N",
				"Name                           func() string                            ƒ"
			],
			[
				"Marshal",
				"MarshalIndent                  func(v interface{}, prefix string, inden ƒ"
			],
			[
				"Pr",
				"Printf	n int, err error ƒ"
			],
			[
				"J",
				"Join                           func(a []string, sep string) string      ƒ"
			],
			[
				"json",
				"json.Marshal	json-marshal"
			]
		]
	},
	"buffers":
	[
		{
			"file": "blacklist.go",
			"settings":
			{
				"buffer_size": 2427,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// Copyright 2016 NJ Software. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage VyOSconfig\n\n// A NodeType is the type of a Node.\ntype NodeType uint32\n\nconst (\n	ErrorNode NodeType = iota\n	DataNode\n	ElementNode\n	DescriptionNode\n)\n\n// A Node consists of a NodeType and some Data (tag name for element nodes,\n// content for text) and are part of a tree of Nodes.\ntype Node struct {\n	Parent, FirstChild, LastChild, PrevSibling, NextSibling *Node\n	Type                                                    NodeType\n	Data                                                    []string\n	Name                                                    string\n}\n\n// InsertBefore inserts newChild as a child of n, immediately before oldChild\n// in the sequence of n's children. oldChild may be nil, in which case newChild\n// is appended to the end of n's children.\n//\n// It will panic if newChild already has a parent or siblings.\nfunc (n *Node) InsertBefore(newChild, oldChild *Node) {\n	if newChild.Parent != nil || newChild.PrevSibling != nil || newChild.NextSibling != nil {\n		panic(\"ERROR: InsertBefore called for an attached child Node\")\n	}\n	var prev, next *Node\n	if oldChild != nil {\n		prev, next = oldChild.PrevSibling, oldChild\n	} else {\n		prev = n.LastChild\n	}\n	if prev != nil {\n		prev.NextSibling = newChild\n	} else {\n		n.FirstChild = newChild\n	}\n	if next != nil {\n		next.PrevSibling = newChild\n	} else {\n		n.LastChild = newChild\n	}\n	newChild.Parent = n\n	newChild.PrevSibling = prev\n	newChild.NextSibling = next\n}\n\n// AppendChild adds a node c as a child of n.\n//\n// It will panic if c already has a parent or siblings.\nfunc (n *Node) AppendChild(c *Node) {\n	if c.Parent != nil || c.PrevSibling != nil || c.NextSibling != nil {\n		panic(\"ERROR: AppendChild called for an attached child Node\")\n	}\n	last := n.LastChild\n	if last != nil {\n		last.NextSibling = c\n	} else {\n		n.FirstChild = c\n	}\n	n.LastChild = c\n	c.Parent = n\n	c.PrevSibling = last\n}\n\n// RemoveChild removes a node c that is a child of n. Afterwards, c will have\n// no parent and no siblings.\n//\n// It will panic if c's parent is not n.\nfunc (n *Node) RemoveChild(c *Node) {\n	if c.Parent != n {\n		panic(\"ERROR: RemoveChild called for a non-child Node\")\n	}\n	if n.FirstChild == c {\n		n.FirstChild = c.NextSibling\n	}\n	if c.NextSibling != nil {\n		c.NextSibling.PrevSibling = c.PrevSibling\n	}\n	if n.LastChild == c {\n		n.LastChild = c.PrevSibling\n	}\n	if c.PrevSibling != nil {\n		c.PrevSibling.NextSibling = c.NextSibling\n	}\n	c.Parent = nil\n	c.PrevSibling = nil\n	c.NextSibling = nil\n}\n\n// reparentChildren reparents all of src's child nodes to dst.\nfunc MoveChildren(dst, src *Node) {\n	for {\n		child := src.FirstChild\n		if child == nil {\n			break\n		}\n		src.RemoveChild(child)\n		dst.AppendChild(child)\n	}\n}\n\n// clone returns a new node with the same type, data and attributes.\n// The clone has no parent, no siblings and no children.\nfunc (n *Node) Clone() *Node {\n	m := &Node{\n		Type: n.Type,\n		Data: make([]string, len(n.Data)),\n	}\n	copy(m.Data, n.Data)\n	return m\n}\n\n// nodeStack is a stack of nodes.\ntype nodeStack []*Node\n\n// pop pops the stack. It will panic if s is empty.\nfunc (s *nodeStack) Pop() *Node {\n	i := len(*s)\n	n := (*s)[i-1]\n	*s = (*s)[:i-1]\n	return n\n}\n\n// top returns the most recently pushed node, or nil if s is empty.\nfunc (s *nodeStack) Top() *Node {\n	if i := len(*s); i > 0 {\n		return (*s)[i-1]\n	}\n	return nil\n}\n\n// index returns the index of the top-most occurrence of n in the stack, or -1\n// if n is not present.\nfunc (s *nodeStack) Index(n *Node) int {\n	for i := len(*s) - 1; i >= 0; i-- {\n		if (*s)[i] == n {\n			return i\n		}\n	}\n	return -1\n}\n\n// insert inserts a node at the given index.\nfunc (s *nodeStack) Insert(i int, n *Node) {\n	(*s) = append(*s, nil)\n	copy((*s)[i+1:], (*s)[i:])\n	(*s)[i] = n\n}\n\n// remove removes a node from the stack. It is a no-op if n is not present.\nfunc (s *nodeStack) Remove(n *Node) {\n	i := s.Index(n)\n	if i == -1 {\n		return\n	}\n	copy((*s)[i:], (*s)[i+1:])\n	j := len(*s) - 1\n	(*s)[j] = nil\n	*s = (*s)[:j]\n}\n",
			"file": "VyOSconfig/VyOSnode.go",
			"file_size": 4088,
			"file_write_time": 130984886300000000,
			"settings":
			{
				"buffer_size": 4088,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "// Copyright 2016 NJ Software. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n// Package VyOSconfig provides methods and data structures for loading\n// an EdgeOS/VyOS configuration\n\npackage VyOSconfig\n\nimport (\n	// \"errors\"\n	\"bytes\"\n	\"fmt\"\n	\"io/ioutil\"\n	\"os\"\n	\"path/filepath\"\n	\"sort\"\n	\"strings\"\n\n	t \"github.com/BurntSushi/toml\"\n)\n\nconst (\n	tmpltd        = \"/Users/Neil/EdgeOs/config/VyOS/vyatta-cfg/templates/\"\n	gettmplte int = iota\n	getconfig\n)\n\n// NewTree creates a new VyOS configuration object\nfunc NewTree(caller int, root string, skiphidden bool) (string, error) {\n	absRoot, err := filepath.Abs(root)\n	if err != nil {\n		return \"\", err\n	}\n\n	var cfgmap = make(map[string]map[string][]string)\n	vyos := new(Node)\n	vyos = &Node{Name: \"root\", Type: ElementNode}\n	fmt.Printf(\"%v\\n\", vyos)\n\n	walkFunc := func(path string, info os.FileInfo, err error) error {\n		switch {\n		case path+\"/\" == root:\n			break\n\n		case skiphidden && strings.Index(info.Name(), \".\") == 0:\n			if info.IsDir() {\n				return filepath.SkipDir\n			}\n\n		case caller == gettmplte:\n			switch {\n			case info.IsDir():\n				_ = \"breakpoint\"\n				vyos.AppendChild(&Node{Name: info.Name(), Type: ElementNode})\n				pstr := strings.Replace(path, root, \"\", 1)\n				key := strings.Join(strings.Split(pstr, \"/\"), \".\")\n\n				cfgmap[key] = make(map[string][]string)\n				ok, _ := filepath.Match(\"node.tag\", info.Name())\n				if ok {\n					_ = \"breakpoint\"\n				}\n\n				break\n			}\n\n		case info.Name() == \"node.val\":\n			{\n				var data []string\n				b, _ := ioutil.ReadFile(path)\n				if len(string(b)) > 0 {\n					data = strings.Split(string(b), \"\\n\")\n				} else {\n					data = []string{}\n				}\n\n				key := strings.Split(strings.Replace(strings.Replace(path, \".node.val\", \"\", 1), root, \"\", 1), \"/\")\n				pkey := strings.Join(key[:len(key)-2], \".\")\n				skey := fmt.Sprintf(\"%s\", key[len(key)-2])\n\n				cfgmap[pkey] = make(map[string][]string)\n				cfgmap[pkey][skey] = data\n\n				break\n\n			}\n		}\n		return nil\n	}\n\n	var rawcfg bytes.Buffer\n\n	if err = filepath.Walk(absRoot, walkFunc); err == nil {\n		pkeys := make([]string, 0, len(cfgmap))\n		for k := range cfgmap {\n			pkeys = append(pkeys, k)\n		}\n		sort.Strings(pkeys)\n\n		for _, pkey := range pkeys {\n			rawcfg.WriteString(fmt.Sprintf(\"[%v]\\n\", pkey))\n			skeys := make([]string, 0, len(cfgmap[pkey]))\n\n			for s := range cfgmap[pkey] {\n				skeys = append(skeys, s)\n			}\n			sort.Strings(skeys)\n\n			for _, skey := range skeys {\n				data := cfgmap[pkey][skey]\n				for i, v := range data {\n					data[i] = fmt.Sprintf(\"\\n%q,\\n\", v)\n				}\n				rawcfg.WriteString(fmt.Sprintf(\"%s = %v\\n\", skey, data))\n			}\n		}\n	}\n	fmt.Printf(\"%v\\n\", vyos)\n	return rawcfg.String(), err\n}\n\n// TOMLcfg defines the TOML struct map\ntype TOMLcfg struct {\n	Features map[string]string\n}\n\n// Active returns a JSON structure of a VyOS configuration tree\nfunc Active(dir string) (config string) {\n	cfgmap, ok := NewTree(gettmplte, tmpltd, false)\n	if ok != nil {\n		fmt.Println(ok)\n		return \"ERROR: getting configuration templates!\"\n	}\n\n	fmt.Printf(\"%v\\n\", cfgmap)\n	_ = \"breakpoint\"\n	config, ok = NewTree(getconfig, dir, true)\n	if ok != nil {\n		fmt.Println(ok)\n		return \"ERROR: getting configuration!\"\n	}\n\n	fmt.Printf(\"%v\\n\", config)\n\n	var cfgobj map[string]*TOMLcfg\n	what, err := t.Decode(config, cfgobj)\n	fmt.Sprintf(\"%v\\n\", what)\n	fmt.Println(err)\n\n	return config\n}\n",
			"file": "VyOSconfig/config.go",
			"file_size": 3389,
			"file_write_time": 130985069690000000,
			"settings":
			{
				"buffer_size": 3389,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 87.0,
		"last_filter": "install",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"go",
				"Set Syntax: Go"
			]
		],
		"width": 512.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h =     '2915d1851351e5ee549c20394736b4428bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"import urllib.request,os,hashlib; h =     '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/Neil/go/src/github.com/britannic/blacklist",
		"/Users/Neil/go/src/github.com/britannic/blacklist/VyOSconfig"
	],
	"file_history":
	[
		"/Users/Neil/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/Neil/Library/Application Support/Sublime Text 3/Packages/User/GoSublime-Go.sublime-settings",
		"/Users/Neil/go/src/github.com/britannic/blacklist/main/blacklist.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/lib/VyOSconfig/VyOSnode.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/lib/VyOSconfig/config.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/lib/config/VyOSnode.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/lib/config/config.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/lib/config.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/lib/VyOSnode.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/blacklist.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/config/config.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/config/VyOSnode.go",
		"/Users/Neil/go/src/github.com/srinathh/gofancydirtree/directory_tree.go",
		"/Users/Neil/go/src/github.com/britannic/config/config.go.bkp.go",
		"/Users/Neil/go/bin/build",
		"/Users/Neil/go/src/github.com/britannic/mapit/static void Main(string[] args).java",
		"/Users/Neil/go/src/github.com/britannic/Doodles/package main.go",
		"/Users/Neil/go/src/github.com/britannic/Doodles/list_ex.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/config/package config.go",
		"/Users/Neil/go/src/github.com/Workiva/go-datastructures/trie/xfast/mock_test.go",
		"/Users/Neil/go/src/github.com/Workiva/go-datastructures/trie/ctrie/ctrie.go",
		"/Users/Neil/go/src/github.com/Workiva/go-datastructures/trie/xfast/xfast.go",
		"/Users/Neil/go/src/github.com/Workiva/go-datastructures/datastructures.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/.gitignore",
		"/Users/Neil/go/src/github.com/britannic/blacklist/doodle.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/nodeTree.go",
		"/Users/Neil/go/src/github.com/britannic/blacklist/logger.go"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Namespace",
			"config.",
			"make",
			"index",
			"s.index",
			"Attr",
			"DataAtom",
			"html:",
			"DoctypeNode",
			"CommentNode",
			"scopeMarker",
			"replace",
			"cfghash",
			"vChild",
			"err",
			"dtree",
			"directoryLocation",
			"Message",
			"Core",
			"s",
			"cfgNodes",
			"key",
			"fp",
			"exists",
			"Peek",
			"SliceSet",
			"File",
			"Folder",
			"fp",
			"VisitFile",
			"Check"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"cfgmap",
			"visitFile"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "/Users/Neil/go/src/github.com/britannic/blacklist"
		}
	],
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "blacklist.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2427,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1130.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "VyOSconfig/VyOSnode.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4088,
						"regions":
						{
						},
						"selection":
						[
							[
								462,
								462
							]
						],
						"settings":
						{
							"open_with_edit": true,
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"tab_size": 3,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "VyOSconfig/config.go",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3389,
						"regions":
						{
						},
						"selection":
						[
							[
								1144,
								1144
							]
						],
						"settings":
						{
							"syntax": "Packages/GoSublime/syntax/GoSublime-Go.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 544.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.9o:///Users/Neil/go/src/github.com/britannic/Doodles":
	{
		"height": 142.0
	},
	"output.9o:///Users/Neil/go/src/github.com/britannic/blacklist":
	{
		"height": 154.0
	},
	"output.9o:///Users/Neil/go/src/github.com/britannic/blacklist/VyOSconfig":
	{
		"height": 142.0
	},
	"output.9o:///Users/Neil/go/src/github.com/britannic/blacklist/config":
	{
		"height": 142.0
	},
	"output.9o:///Users/Neil/go/src/github.com/britannic/blacklist/main":
	{
		"height": 142.0
	},
	"output.9o:///Users/Neil/go/src/github.com/britannic/config":
	{
		"height": 142.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.gotools_syntax_errors":
	{
		"height": 142.0
	},
	"pinned_build_system": "Packages/GoSublime/GoSublime.sublime-build",
	"project": "",
	"replace":
	{
		"height": 70.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
